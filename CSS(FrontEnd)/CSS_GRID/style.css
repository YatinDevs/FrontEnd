/* 
   In CSS Grid is very powerful two-dimensional layout System.
   Flexbox is one-dimensional layout System.                    */
 @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;500;700&family=Roboto:wght@400;500;700;900&display=swap');

*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
body{
      
    font-family: 'Poppins',sans-serif;

      
}
.container{
    max-width: 1440px;
    border: 1px solid red;
    margin: 100px auto; /* To center */

    /* display: flex; */
    display: grid; /* Container --> Grid Container Created Parent */

    /*   Grid Container Properties: */

    /* grid-template-columns: 100px 200px 100px; */
    /* grid-template-columns: 33% 33% 33%; */
    /* grid-template-columns: 1fr 1fr 1fr; */
    /* fraction means remaining space will be occupied equal in notified fractions */
    /* grid-template-columns: 300px repeat(2,1fr); */ 




    /* Variable columns*/
    /* auto-fill , auto-fit */
    /* grid-template-columns:  repeat(auto-fill,200px);  */
                               /*  minmax(min,max) */
    /* grid-template-columns:  repeat(auto-fit,minmax(150px,1fr));  */
    grid-template-columns:  repeat(auto-fill,minmax(150px,1fr)); 
   



    /* column-gap:10px; */
    /* row-gap: 10px; */
     /* gap : row column*/
      gap: 10px 20px;
     /* grid-template-rows: 100px 100px; */

     /* Implitcity Created rows will be 100px */
     /* grid-auto-rows: 100px; */

     /* Implitcity Created columns will be 100px */
      /* grid-auto-columns: 200px; */

     /*  grid-auto-flow : row (default) */
        /* grid-auto-flow: column; */



     grid-auto-flow: dense; /* to densely pack blank spaces in between */
} 

/* Grid Container Items */
.item{
    background: salmon;
    color: #fff;
    padding: 10px;
    border: 2px solid black;
}

.item1{
    /* grid-column-start: 1; 
    grid-column-end: 3; */
    /* grid-column: 1 / 3; */
    /* grid-column: 1 / span 2; */

  
    grid-row: span 2;
    grid-column: span 2;

    /* grid-row-start: 1;
    grid-row-end: 4;  */
    /* grid-row: 1 / 4; */
    /* grid-row: 1 / span 3; */
}

.item8{
    grid-row: span 2;
    grid-column: span 2;
}

.item4{ 
    grid-column: 1 / -1;
}
/*
 ## Grid is Layout Design Tool:##

   # # # Grid Container Properties:

1.  grid-template-columns: 1fr 2fr 1fr;;
   short-hand :   grid-template-columns: repeat(3,1fr);
    long-hand :   grid-template-columns: 1fr 1fr 1fr;;

    (    
     explicit : we change columns pixels explicitly and no of columns.
     implicit : rows were implicitly arranged.
    )
     
2.    grid-template-rows: 100px 200px 100px 400px;

3.    column-gap:10px; 

4.    row-gap: 10px; 

5.    gap : row column
      gap: 10px 20px;

      (used often)
      Implitcity Created rows will be 100px 
6.     grid-auto-rows: 100px; 

       Implitcity Created columns will be 100px 
7.      grid-auto-columns: 200px;       (rarely used)


8.       grid-auto-flow : row (default) 
        grid-auto-flow: column;  (rarely used)

9.        grid-template-columns: 300px repeat(2,1fr);
           to keep 1 column fixed


10.         grid-template-columns:  repeat(auto-fit,150px); 
            in case of auto fill extra columns are created


11.       grid-template-columns:  repeat(auto-fit,150px); 
            in case of auto fit extra columns are not created


12 .   Min-max function with auto-fit and auto-fill :

13.      grid-auto-flow: dense;  to densely pack blank spaces in between 


  
    Grid Items Properties :

    1.  grid-column-start: 1; 
    2.  grid-column-end: 3; 
    3. grid-column: 1 / 3; 
    4. grid-column: 1 / span 2; 

  
    5. grid-row: span 2;
    6. grid-column: span 2;

    7.  grid-row-start: 1;
    8.  grid-row-end: 4;  
    9.  grid-row: 1 / 4; 
    10. grid-row: 1 / span 3; 


*/